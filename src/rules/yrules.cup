package rules;

import java_cup.runtime.*;
import ficExcel.CT;
import ficExcel.Sheet;
   
parser code {:
    
    CT tb = new CT("YIS CT Build R02D02_P.xls", "xml/CT.xml");
    
    String input1 = "EPYISA";
    String input2 = "YIS";
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN; */
/* terminal Integer   NUMBER, ID; */
   
   terminal			LPAREN, RPAREN;
	terminal	EQ, DIF;		
   terminal			CHAINE, SHEET, SEMI, INPUT, EL;
   non terminal expr, expr_list, num_ligne, element, colonne, bool;
   
/*non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, term;*/

expr_list ::= expr_list expr
				|
				expr
				;



expr ::= SHEET:e SEMI {: System.out.println("Résultat : " + e); :}
		|
		CHAINE:e SEMI {: System.out.println("Pas un onglet : " + e); :}
		|
		num_ligne SEMI
		|
		bool
		;
		
bool ::= element:e1 EQ element:e2 SEMI {: :}
		|
		element:e1 DIF element:e2 SEMI {: :}
		;
		
		
num_ligne ::= colonne:c LPAREN element:g RPAREN
					{:
					int ligne = 0;
					Sheet sheet = tb.chercherOnglet(((ElementColonne)c).sheet);
					ligne = tb.ligneEleUniqueDansColonne(sheet, ((ElementColonne)c).column, input1);
					System.out.println("le numéro de ligne est : " + ligne + ".");
					:} ;

element ::= INPUT {: RESULT = new String(input1); :}
		|
		colonne LPAREN num_ligne RPAREN
					{:
					:}
		|
		EL
		;		
			
colonne ::= SHEET:e CHAINE:f
					{:
					System.out.println("Trouvé : " + e.toString() + " " + f.toString());
					RESULT = new ElementColonne(e.toString(), f.toString());
					:} ;
			
		
/*		|
		;
		bool
		;

bool ::= LPAREN objet EQ objet RPAREN
		|
		LPAREN objet DIF objet RPAREN
		;

objet ::= colonne LPAREN num_ligne RPAREN
		|
		INPUT
		;
		
num_ligne ::= colonne LPAREN element RPAREN	




comparaison ::= 	element EQ element
					{: System.out.println("égalité"); :}
					|
					element DIF element
					{: System.out.println("non égalité"); :}
					;
					

num_ligne ::= 




   expr_list ::= expr_list expr_part
                 |
                 expr_part;
   
   expr_part ::= expr:e
                 {: System.out.println(" = " + e); :}
                 SEMI
                 ;
   
   expr      ::= expr:e PLUS factor:f
                 {: RESULT = new Integer(e.intValue() + f.intValue()); :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = new Integer(e.intValue() - f.intValue()); :}
                 |
                 factor:f
                 {: RESULT = new Integer(f.intValue()); :}
                 ;
   
   factor    ::= factor:f TIMES term:t
                 {: RESULT = new Integer(f.intValue() * t.intValue()); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new Integer(f.intValue() / t.intValue()); :}
                 |
                 term:t
                 {: RESULT = new Integer(t.intValue()); :}
                 ;
   
   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = n; :}
                 |
                 ID:i
                 {: RESULT = i; :}
                 ;
*/